
package GesVideoClub;

import java.util.ArrayList;
import java.util.HashSet;
import javax.swing.JOptionPane;
import javax.swing.DefaultListModel;


public class Clientes extends javax.swing.JFrame {

    private DefaultListModel<String> clientesListModel = new DefaultListModel<>();
     private ArrayList<Cliente> listaClientes = new ArrayList<>();
     private ArrayList<Prestamo> listaPrestamos = new ArrayList<>();


    
    public Clientes() {
        initComponents();
        clientesList.setModel(clientesListModel);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        cedulaCli = new javax.swing.JLabel();
        FeNaciCli = new javax.swing.JLabel();
        nombreCli = new javax.swing.JLabel();
        telefonoCli = new javax.swing.JLabel();
        correoCli = new javax.swing.JLabel();
        dirrecionCli = new javax.swing.JLabel();
        cedulaTxt = new javax.swing.JTextField();
        nombreTXT = new javax.swing.JTextField();
        telefonoTxT = new javax.swing.JTextField();
        correoTxT = new javax.swing.JTextField();
        dirrecionTxt = new javax.swing.JTextField();
        agregarB = new javax.swing.JButton();
        buscarB = new javax.swing.JButton();
        eliminarB = new javax.swing.JButton();
        actualizarB = new javax.swing.JButton();
        FeNaciTxtx = new javax.swing.JFormattedTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        clientesList = new javax.swing.JList<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        cedulaCli.setText("Cedula:");

        FeNaciCli.setText("Fecha Nacimiento: ");

        nombreCli.setText("Nombre");

        telefonoCli.setText("Telefono:");

        correoCli.setText("Correo:");

        dirrecionCli.setText("Direccion:");

        cedulaTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cedulaTxtActionPerformed(evt);
            }
        });

        nombreTXT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nombreTXTActionPerformed(evt);
            }
        });

        telefonoTxT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                telefonoTxTActionPerformed(evt);
            }
        });

        correoTxT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                correoTxTActionPerformed(evt);
            }
        });

        dirrecionTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dirrecionTxtActionPerformed(evt);
            }
        });

        agregarB.setText("Agregar");
        agregarB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarBActionPerformed(evt);
            }
        });

        buscarB.setText("Buscar");
        buscarB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarBActionPerformed(evt);
            }
        });

        eliminarB.setText("Eliminar");
        eliminarB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarBActionPerformed(evt);
            }
        });

        actualizarB.setText("Actualizar");
        actualizarB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actualizarBActionPerformed(evt);
            }
        });

        FeNaciTxtx.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(java.text.DateFormat.getDateInstance(java.text.DateFormat.SHORT))));
        FeNaciTxtx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FeNaciTxtxActionPerformed(evt);
            }
        });

        clientesList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(clientesList);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(cedulaCli)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cedulaTxt)
                        .addGap(12, 12, 12)
                        .addComponent(nombreCli))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(dirrecionCli)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(dirrecionTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(FeNaciCli)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(FeNaciTxtx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(correoCli)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(correoTxT, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(agregarB)
                        .addGap(18, 18, 18)
                        .addComponent(buscarB)
                        .addGap(18, 18, 18)
                        .addComponent(eliminarB)
                        .addGap(18, 18, 18)
                        .addComponent(actualizarB)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 6, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(nombreTXT, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(telefonoCli)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(telefonoTxT)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cedulaCli)
                    .addComponent(cedulaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nombreCli, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nombreTXT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FeNaciCli)
                    .addComponent(telefonoCli)
                    .addComponent(telefonoTxT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(FeNaciTxtx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(correoCli)
                            .addComponent(correoTxT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(dirrecionCli)
                            .addComponent(dirrecionTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(agregarB)
                            .addComponent(buscarB)
                            .addComponent(eliminarB)
                            .addComponent(actualizarB))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 208, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
private void actualizarListaClientes() {
    clientesListModel.clear(); 

    for (Cliente cliente : listaClientes) {
        clientesListModel.addElement(cliente.getNombre() + " - " + cliente.getCedula());
    }
}
    private void buscarBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarBActionPerformed
   String cedula = cedulaTxt.getText();
    Cliente clienteEncontrado = buscarCliente(listaClientes, cedula);
    if (clienteEncontrado != null) {
    } else {
        JOptionPane.showMessageDialog(this, "Cliente no encontrado", "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_buscarBActionPerformed

    private void FeNaciTxtxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FeNaciTxtxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_FeNaciTxtxActionPerformed

    private void correoTxTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_correoTxTActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_correoTxTActionPerformed

    private void agregarBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarBActionPerformed
     String cedula = cedulaTxt.getText();
    String nombre = nombreTXT.getText();
    String fechaNacimiento = FeNaciTxtx.getText();
    String telefono = telefonoTxT.getText();
    String correo = correoTxT.getText();
    String direccion = dirrecionTxt.getText();

    if (cedula.isEmpty()) {
        JOptionPane.showMessageDialog(this, "La cédula es obligatoria", "Error", JOptionPane.ERROR_MESSAGE);
        return;  
    }

    Cliente nuevoCliente = new Cliente(cedula, nombre, fechaNacimiento, telefono, correo, direccion);

    try {
        nuevoCliente.agregarCliente(listaClientes, nuevoCliente);
    } catch (FaltaDaException e) {
        JOptionPane.showMessageDialog(this, "Error al agregar el cliente: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }

    actualizarListaClientes();

    }//GEN-LAST:event_agregarBActionPerformed

    private void eliminarBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarBActionPerformed
         String cedula = cedulaTxt.getText();

    Cliente clienteEncontrado = buscarCliente(listaClientes, cedula);
    if (clienteEncontrado != null) {
        try {
            eliminarCliente(listaClientes, listaPrestamos, cedula);
        } catch (ClienteAsoException e) {
            JOptionPane.showMessageDialog(this, "Error al eliminar el cliente: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
           }
    } else {
       
    }

    actualizarListaClientes();
    }//GEN-LAST:event_eliminarBActionPerformed

    private void actualizarBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actualizarBActionPerformed
      String cedula = cedulaTxt.getText();
    String nombre = nombreTXT.getText();
    String fechaNacimiento = FeNaciTxtx.getText();
    String telefono = telefonoTxT.getText();
    String correo = correoTxT.getText();
    String direccion = dirrecionTxt.getText();

    Cliente clienteActualizado = new Cliente(cedula, nombre, fechaNacimiento, telefono, correo, direccion);

    Cliente clienteEncontrado = buscarCliente(listaClientes, cedula);
    if (clienteEncontrado != null) {
        clienteActualizado.actualizarCliente(listaClientes, clienteActualizado);
    } else {
        
    }

    actualizarListaClientes();

    }//GEN-LAST:event_actualizarBActionPerformed

    private void dirrecionTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dirrecionTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dirrecionTxtActionPerformed

    private void cedulaTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cedulaTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cedulaTxtActionPerformed

    private void nombreTXTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nombreTXTActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nombreTXTActionPerformed

    private void telefonoTxTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_telefonoTxTActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_telefonoTxTActionPerformed
  public void agregarCliente(ArrayList<Cliente> clientes, Cliente cliente) throws FaltaDaException {
        if (cliente == null || cliente.getCedula() == null || cliente.getNombre() == null || cliente.getFechaNacimiento() == null
                || cliente.getTelefono() == null || cliente.getCorreo() == null || cliente.getDireccion() == null) {
            throw new FaltaDaException();
        }
        clientes.add(cliente);
    }

 public Cliente buscarCliente(ArrayList<Cliente> clientes, String cedula) {
    for (Cliente cliente : clientes) {
        if (cliente.getCedula().equals(cedula)) {
            return cliente;
        }
    }
    return null;
}

    public void actualizarCliente(ArrayList<Cliente> clientes, Cliente cliente) {
        for (int i = 0; i < clientes.size(); i++) {
            if (clientes.get(i).getCedula().equals(cliente.getCedula())) {
                clientes.set(i, cliente);
                break;
            }
        }
    }

    public void eliminarCliente(ArrayList<Cliente> clientes, ArrayList<Prestamo> prestamos, String cedula) throws ClienteAsoException {
        if (clienteEnUso(prestamos)) {
            throw new ClienteAsoException();
        }

        for (int i = 0; i < clientes.size(); i++) {
            if (clientes.get(i).getCedula().equals(cedula)) {
                clientes.remove(i);
                break;
            }
        }
    }

    private boolean clienteEnUso(ArrayList<Prestamo> prestamos) {
        for (Prestamo prestamo : prestamos) {
            if (prestamo.getCliente().equals(this)) {
                return true;
            }
        }
        return false;
    }

    public void verificarClienteDupli(HashSet<String> clientesDupli) throws InfoDuplicadaException {
        if (clientesDupli.contains(this.getCedula())) {
            throw new InfoDuplicadaException();
        } else {
            clientesDupli.add(this.getCedula());
        }
    }

    public void agregarClienteS(HashSet<String> clientesDupli) {
        clientesDupli.add(this.getCedula());
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Clientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Clientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Clientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Clientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Clientes().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel FeNaciCli;
    private javax.swing.JFormattedTextField FeNaciTxtx;
    private javax.swing.JButton actualizarB;
    private javax.swing.JButton agregarB;
    private javax.swing.JButton buscarB;
    private javax.swing.JLabel cedulaCli;
    private javax.swing.JTextField cedulaTxt;
    private javax.swing.JList<String> clientesList;
    private javax.swing.JLabel correoCli;
    private javax.swing.JTextField correoTxT;
    private javax.swing.JLabel dirrecionCli;
    private javax.swing.JTextField dirrecionTxt;
    private javax.swing.JButton eliminarB;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel nombreCli;
    private javax.swing.JTextField nombreTXT;
    private javax.swing.JLabel telefonoCli;
    private javax.swing.JTextField telefonoTxT;
    // End of variables declaration//GEN-END:variables

   
   

}
